import React, { useState } from "react";
import {
  Container,
  Typography,
  FormControl,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Button,
  Box,
  createTheme,
  ThemeProvider,
  IconButton,
  TextField,
} from "@mui/material";
import WordCloudComponent from "./WordCloudComponent";
import BarChartComponent from "./BarChartComponent";
import PieChartComponent from "./PieChartComponent";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import { DatePicker } from "@mui/x-date-pickers";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs from "dayjs";
// import { get } from "aws-amplify/api";
// import { Amplify } from "aws-amplify";
// import awsExports from "./aws-exports"; // This file is generated by Amplify
// Amplify.configure(awsExports);

const theme = createTheme({
  palette: {
    mode: "dark",
    primary: {
      main: "#00b0ff",
    },
  },
});

const FormComponent = () => {
  const [step, setStep] = useState(1);
  const totalSteps = 3;

  // state display to handle which chart to show
  const [displayMode, setDisplayMode] = useState("form");

  // data received from API
  const [analysisData, setAnalysisData] = useState(null);

  const [platforms, setPlatforms] = useState({
    youtube: false,
    reddit: false,
    twitter: false,
  });

  const [dateRange, setDateRange] = useState({
    // Random boundaries for now
    // TODO - Grey out dates that are not available to input
    start: dayjs("2020-10-01"), // October 1, 2020
    end: dayjs("2023-11-30"), // November 30, 2023
  });

  const handlePlatformChange = (event) => {
    setPlatforms({ ...platforms, [event.target.name]: event.target.checked });
  };

  const handleNext = () => {
    if (step < totalSteps) {
      setStep((prevStep) => prevStep + 1);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep((prevStep) => prevStep - 1);
    }
  };

  const handleDateChange = (name, value) => {
    setDateRange({ ...dateRange, [name]: value });
  };

  const get_sentiments = async () => {
    const invokeURL =
      "https://mwryxefl17.execute-api.us-east-1.amazonaws.com/dev/sentiments";

    // Define query string parameters
    const queryParams = new URLSearchParams({
      limit: 5,
      source: "reddit",
    });

    // Construct the full URL with query string parameters
    const urlWithParams = `${invokeURL}?${queryParams.toString()}`;

    // Define the headers
    const headers = {
      // "Access-Control-Allow-Origin": "*",
      // "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
      // "Access-Control-Allow-Headers": "Content-Type, Authorization",
      // "Access-Control-Allow-Credentials": "true",
      date_range_from: "2020-01-01",
      date_range_to: "2024-01-01",
    };

    // Use fetch to make the GET request
    fetch(urlWithParams, {
      method: "GET",
      // headers: headers,
    })
      .then((response) => response.json())
      .then((data) => {
        setAnalysisData(data);
        setDisplayMode("");
        console.log(data);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  };

  return (
    <ThemeProvider theme={theme}>
      <Box
        sx={{
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Container component="main" maxWidth="sm" sx={{ p: 3 }}>
          <Typography component="h1" variant="h5" color="primary" gutterBottom>
            Sentiment Analysis{" "}
            {/* Removed the <h1> tag here, it's not needed */}
          </Typography>
          {displayMode === "form" && (
            <>
              {step === 1 && (
                <FormControl component="fieldset" variant="standard" fullWidth>
                  <FormGroup>
                    <Typography variant="h6">
                      Choose your platform(s)
                    </Typography>
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={platforms.youtube}
                          onChange={handlePlatformChange}
                          name="youtube"
                        />
                      }
                      label="YouTube"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={platforms.reddit}
                          onChange={handlePlatformChange}
                          name="reddit"
                        />
                      }
                      label="Reddit"
                    />
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={platforms.twitter}
                          onChange={handlePlatformChange}
                          name="twitter"
                        />
                      }
                      label="Twitter"
                    />
                  </FormGroup>
                </FormControl>
              )}

              {step === 2 && (
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    width: "100%",
                    mt: 2,
                  }}
                >
                  <LocalizationProvider dateAdapter={AdapterDayjs}>
                    <DatePicker
                      label="Start Date"
                      value={dateRange.start}
                      onChange={(newValue) => {
                        handleDateChange("start", newValue);
                      }}
                      renderInput={(params) => <TextField {...params} />}
                    />
                    <DatePicker
                      label="End Date"
                      value={dateRange.end}
                      onChange={(newValue) => {
                        handleDateChange("end", newValue);
                      }}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  </LocalizationProvider>
                </Box>
              )}
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "space-between",
                  width: "100%",
                  mt: 2,
                }}
              >
                {step > 1 ? (
                  <IconButton onClick={handleBack} color="primary">
                    <ArrowBackIcon />
                  </IconButton>
                ) : (
                  // This empty div acts as a placeholder to keep the "next" button aligned to the right
                  <div />
                )}
                {/* Empty div here to maintain spacing if necessary */}
                <div style={{ flexGrow: 1 }} />
                {step < totalSteps ? (
                  <IconButton onClick={handleNext} color="primary">
                    <ArrowForwardIcon />
                  </IconButton>
                ) : (
                  // If you have a final action when step === totalSteps, place it here. Otherwise, keep an empty div to maintain alignment.
                  <div />
                )}
              </Box>

              <Button
                variant="contained"
                color="primary"
                onClick={get_sentiments}
                fullWidth
                sx={{ mt: 2 }}
              >
                Analyze
              </Button>
            </>
          )}
          {displayMode === "wordCloud" && analysisData && (
            <WordCloudComponent data={analysisData} />
          )}
          {displayMode === "wordCloud" && analysisData && (
            <WordCloudComponent data={analysisData} />
          )}
          {displayMode === "barChart" && analysisData && (
            <BarChartComponent data={analysisData} />
          )}
          {displayMode === "pieChart" && analysisData && (
            <PieChartComponent data={analysisData} />
          )}
          // Add buttons or controls here to switch between display modes, e.g.:
          {analysisData && (
            <Box>
              <Button onClick={() => setDisplayMode("wordCloud")}>
                Word Cloud
              </Button>
              <Button onClick={() => setDisplayMode("barChart")}>
                Bar Chart
              </Button>
              <Button onClick={() => setDisplayMode("pieChart")}>
                Pie Chart
              </Button>
            </Box>
          )}
        </Container>
      </Box>
    </ThemeProvider>
  );
};
export default FormComponent;
